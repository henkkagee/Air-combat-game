# Review form for project XXX

Review for Air Combat 2

Reviewed by: Henrik Granö, Waleed Iftikhar Aarni Kolehmainen and Joona Viheriä

Provide short comments (2-4 sentences) for each item below.

## 1. Overall design and functionality (0-6p)

  * 1.1: The implementation corresponds to the selected topic and
scope. The extent of project is large enough to accommodate work for
everyone (2p)

  - The implementation thus far corresponds well to the given topic and seems like
  the game might be good fun when finished. 2p

  * 1.2: The software structure is appropriate, clear and well
documented. e.g. class structure is justified, inheritance used where
appropriate, information hiding is implemented as appropriate. (2p)

  - File structure is a bit unclear. Almost all ode is in the main function,
   but the code itself is reasonably clear. 1p

  * 1.3: Use of external libraries is justified and well documented. (2p)

  - All the used are appropriate for the use case. 2p

## 2. Working practices (0-6p)

  * 2.1: Git is used appropriately (e.g., commits are logical and
frequent enough, commit logs are descriptive). (2 p)

  - Commits are mostly descriptive, but not all of them. Some commits are also
  in past tense. 1p

  * 2.2: Work is distributed and organised well. Everyone contributes to
the project and has a relevant role that matches his/her skills. The
distribution of roles is described well enough. (2p)

  - From the work log it is evident that everyone has contributed. Description
  of performed task could be more specific. 1p

  * 2.3: Quality assurance is appropriate. Implementation is tested
comprehensively and those testing principles are well documented. (2p)

  - At this moment the testing equals the product. 1p

## 3. Implementation aspects (0-8p)

  * 3.1: Building the software is easy and well documented. CMake or
such tool is highly recommended. (2p)

  - Building the project is not yet documented. 0p

  * 3.2: Memory management is robust, well-organised and
coherent. E.g., smart pointers are used where appropriate or RO3/5 is
followed. The memory management practices should be documented. (2p)

  - There is no memory management implemented as of yet. 1p

  * 3.3: C++ standard library is used where appropriate. For example,
containers are used instead of own solutions where it makes sense. (2
p)

  - Thus far everything is done as appropriate. No weird self-implemented
  constructs have been used. 2p

  * 3.4: Implementation works robustly also in exceptional
situations. E.g., functions can survive invalid inputs and exception
handling is used where appropriate. (2p)

  - Error handling is very present. 2p

## 4. Project extensiveness (0-10p)

  * Project contains features beyond the minimal requirements: Most of
the projects list additional features which can be implemented for
more points. Teams can also suggest their own custom features, though
they have to be in the scope of the project and approved by the course
assistant who is overseeing the project. (0-10p)

- Unsurprisingly, not many features have been implemented yet. However,
taking into consideration that this is a mid-project review, the project
looks quite fine and we are optimistic about the groups ability to deliver
a product of very high quality. 7p
